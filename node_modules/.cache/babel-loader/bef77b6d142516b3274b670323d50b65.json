{"ast":null,"code":"import _asyncToGenerator from \"/Users/karen/repos/karen/kshack/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectSpread from \"/Users/karen/repos/karen/kshack/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/Users/karen/repos/karen/kshack/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"url\", \"y\", \"space\", \"width\", \"height\", \"obj\", \"ready\"];\n\nvar _jsxFileName = \"/Users/karen/repos/karen/kshack/src/components/SoundVisualizer.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport _regeneratorRuntime from \"/Users/karen/repos/karen/kshack/node_modules/@babel/runtime/regenerator/index.js\";\nimport * as THREE from 'three';\nimport { Suspense, useEffect, useRef } from 'react';\nimport { Canvas, useFrame } from '@react-three/fiber';\nimport { useAsset } from 'use-asset';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function SoundVisualizer(_ref) {\n  var ready = _ref.ready;\n  return /*#__PURE__*/_jsxDEV(Canvas, {\n    shadows: true,\n    dpr: [1, 2],\n    camera: {\n      position: [-1, 1.5, 1],\n      fov: 25\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"spotLight\", {\n      position: [-4, 4, -4],\n      angle: 0.06,\n      penumbra: 1,\n      castShadow: true,\n      \"shadow-mapSize\": [2048, 2048]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Suspense, {\n      fallback: null,\n      children: [/*#__PURE__*/_jsxDEV(Track, {\n        \"position-z\": 0,\n        url: \"/sleep.wav\",\n        ready: ready\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Zoom, {\n        url: \"/sleep.wav\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      receiveShadow: true,\n      rotation: [-Math.PI / 2, 0, 0],\n      position: [0, -0.025, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"shadowMaterial\", {\n        transparent: true,\n        opacity: 0.15\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n}\n_c = SoundVisualizer;\n\nfunction Track(_ref2) {\n  _s();\n\n  var url = _ref2.url,\n      _ref2$y = _ref2.y,\n      y = _ref2$y === void 0 ? 2500 : _ref2$y,\n      _ref2$space = _ref2.space,\n      space = _ref2$space === void 0 ? 1.8 : _ref2$space,\n      _ref2$width = _ref2.width,\n      width = _ref2$width === void 0 ? 0.01 : _ref2$width,\n      _ref2$height = _ref2.height,\n      height = _ref2$height === void 0 ? 0.05 : _ref2$height,\n      _ref2$obj = _ref2.obj,\n      obj = _ref2$obj === void 0 ? new THREE.Object3D() : _ref2$obj,\n      _ref2$ready = _ref2.ready,\n      ready = _ref2$ready === void 0 ? false : _ref2$ready,\n      props = _objectWithoutProperties(_ref2, _excluded);\n\n  var ref = useRef(); // use-asset is the library that r3f uses internally for useLoader. It caches promises and\n  // integrates them with React suspense. You can use it as-is with or without r3f.\n\n  var _useAsset = useAsset(function () {\n    return createAudio(url);\n  }, url),\n      gain = _useAsset.gain,\n      context = _useAsset.context,\n      update = _useAsset.update,\n      data = _useAsset.data;\n\n  useEffect(function () {\n    // Connect the gain node, which plays the audio\n    gain.connect(context.destination); // Disconnect it on unmount\n\n    return function () {\n      return gain.disconnect();\n    };\n  }, [gain, context]);\n  useFrame(function (state) {\n    if (ready) {\n      var avg = update(); // Distribute the instanced planes according to the frequency daza\n\n      for (var i = 0; i < data.length; i++) {\n        obj.position.set(i * width * space - data.length * width * space / 2, data[i] / y, 0);\n        obj.updateMatrix();\n        ref.current.setMatrixAt(i, obj.matrix);\n      } // Set the hue according to the frequency average\n\n\n      ref.current.material.color.setHSL(avg / 500, 0.95, 0.75);\n      ref.current.instanceMatrix.needsUpdate = true;\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"instancedMesh\", _objectSpread(_objectSpread({\n    castShadow: true,\n    ref: ref,\n    args: [null, null, data.length]\n  }, props), {}, {\n    children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n      args: [width, height]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n      toneMapped: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }), void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Track, \"bOH+CqmqyJgfnSF3t4JevugIY04=\", false, function () {\n  return [useAsset, useFrame];\n});\n\n_c2 = Track;\n\nfunction Zoom(_ref3) {\n  _s2();\n\n  var url = _ref3.url;\n\n  // This will *not* re-create a new audio source, suspense is always cached,\n  // so this will just access (or create and then cache) the source according to the url\n  var _useAsset2 = useAsset(function () {\n    return createAudio(url);\n  }, url),\n      data = _useAsset2.data;\n\n  return useFrame(function (state) {\n    // Set the cameras field of view according to the frequency average\n    state.camera.fov = 25 - data.avg / 15;\n    state.camera.updateProjectionMatrix();\n  });\n}\n\n_s2(Zoom, \"9IYfCxx86IceS7ZsFzSJEeDqVE8=\", false, function () {\n  return [useAsset, useFrame];\n});\n\n_c3 = Zoom;\n\nfunction createAudio(_x) {\n  return _createAudio.apply(this, arguments);\n}\n\nfunction _createAudio() {\n  _createAudio = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url) {\n    var res, buffer, context, source, gain, analyser, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch(url);\n\n          case 2:\n            res = _context.sent;\n            _context.next = 5;\n            return res.arrayBuffer();\n\n          case 5:\n            buffer = _context.sent;\n            context = new (window.AudioContext || window.webkitAudioContext)();\n            source = context.createBufferSource();\n            _context.next = 10;\n            return new Promise(function (res) {\n              return context.decodeAudioData(buffer, res);\n            });\n\n          case 10:\n            source.buffer = _context.sent;\n            source.loop = true; // This is why it doesn't run in Safari 🍏🐛. Start has to be called in an onClick event\n            // which makes it too awkward for a little demo since you need to load the async data first\n\n            source.start(0); // Create gain node and an analyser\n\n            gain = context.createGain();\n            analyser = context.createAnalyser();\n            analyser.fftSize = 64;\n            source.connect(analyser);\n            analyser.connect(gain); // The data array receive the audio frequencies\n\n            data = new Uint8Array(analyser.frequencyBinCount);\n            return _context.abrupt(\"return\", {\n              context: context,\n              source: source,\n              gain: gain,\n              data: data,\n              // This function gets called every frame per audio source\n              update: function update() {\n                analyser.getByteFrequencyData(data); // Calculate a frequency average\n\n                // Calculate a frequency average\n                return data.avg = data.reduce(function (prev, cur) {\n                  return prev + cur / data.length;\n                }, 0);\n              }\n            });\n\n          case 20:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _createAudio.apply(this, arguments);\n}\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"SoundVisualizer\");\n$RefreshReg$(_c2, \"Track\");\n$RefreshReg$(_c3, \"Zoom\");","map":{"version":3,"sources":["/Users/karen/repos/karen/kshack/src/components/SoundVisualizer.js"],"names":["THREE","Suspense","useEffect","useRef","Canvas","useFrame","useAsset","SoundVisualizer","ready","position","fov","Math","PI","Track","url","y","space","width","height","obj","Object3D","props","ref","createAudio","gain","context","update","data","connect","destination","disconnect","state","avg","i","length","set","updateMatrix","current","setMatrixAt","matrix","material","color","setHSL","instanceMatrix","needsUpdate","Zoom","camera","updateProjectionMatrix","fetch","res","arrayBuffer","buffer","window","AudioContext","webkitAudioContext","source","createBufferSource","Promise","decodeAudioData","loop","start","createGain","analyser","createAnalyser","fftSize","Uint8Array","frequencyBinCount","getByteFrequencyData","reduce","prev","cur"],"mappings":"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","sourcesContent":["import * as THREE from 'three'\nimport { Suspense, useEffect, useRef } from 'react'\nimport { Canvas, useFrame } from '@react-three/fiber'\nimport { useAsset } from 'use-asset'\n\nexport function SoundVisualizer({ready}) {  \n  return (\n    <Canvas shadows dpr={[1, 2]} camera={{ position: [-1, 1.5, 1], fov: 25 }}>\n      <spotLight position={[-4, 4, -4]} angle={0.06} penumbra={1} castShadow shadow-mapSize={[2048, 2048]} />\n      <Suspense fallback={null}>\n        <Track position-z={0} url=\"/sleep.wav\" ready={ready} />\n        <Zoom url=\"/sleep.wav\" />\n      </Suspense>\n      <mesh receiveShadow rotation={[-Math.PI / 2, 0, 0]} position={[0, -0.025, 0]}>\n        <planeGeometry />\n        <shadowMaterial transparent opacity={0.15} />\n      </mesh>\n    </Canvas>\n  )\n}\n\nfunction Track({ url, y = 2500, space = 1.8, width = 0.01, height = 0.05, obj = new THREE.Object3D(), ready = false,...props }) {\n  const ref = useRef()\n  // use-asset is the library that r3f uses internally for useLoader. It caches promises and\n  // integrates them with React suspense. You can use it as-is with or without r3f.\n  const { gain, context, update, data } = useAsset(() => createAudio(url), url)\n  useEffect(() => {\n    // Connect the gain node, which plays the audio\n    gain.connect(context.destination)\n    // Disconnect it on unmount\n    return () => gain.disconnect()\n  }, [gain, context])\n  \n  useFrame((state) => {\n    if (ready) {\n      let avg = update()\n      // Distribute the instanced planes according to the frequency daza\n      for (let i = 0; i < data.length; i++) {\n        obj.position.set(i * width * space - (data.length * width * space) / 2, data[i] / y, 0)\n        obj.updateMatrix()\n        ref.current.setMatrixAt(i, obj.matrix)\n      }\n      // Set the hue according to the frequency average\n      ref.current.material.color.setHSL(avg / 500, 0.95, 0.75)\n      ref.current.instanceMatrix.needsUpdate = true\n    }\n  })\n  return (\n    <instancedMesh castShadow ref={ref} args={[null, null, data.length]} {...props}>\n      <planeGeometry args={[width, height]} />\n      <meshBasicMaterial toneMapped={false} />\n    </instancedMesh>\n  )\n}\n\nfunction Zoom({ url }) {\n  // This will *not* re-create a new audio source, suspense is always cached,\n  // so this will just access (or create and then cache) the source according to the url\n  const { data } = useAsset(() => createAudio(url), url)\n  return useFrame((state) => {\n    // Set the cameras field of view according to the frequency average\n    state.camera.fov = 25 - data.avg / 15\n    state.camera.updateProjectionMatrix()\n  })\n}\n\nasync function createAudio(url) {\n  // Fetch audio data and create a buffer source\n  const res = await fetch(url)\n  const buffer = await res.arrayBuffer()\n  const context = new (window.AudioContext || window.webkitAudioContext)()\n  const source = context.createBufferSource()\n  source.buffer = await new Promise((res) => context.decodeAudioData(buffer, res))\n  source.loop = true\n  // This is why it doesn't run in Safari 🍏🐛. Start has to be called in an onClick event\n  // which makes it too awkward for a little demo since you need to load the async data first\n  source.start(0)\n  // Create gain node and an analyser\n  const gain = context.createGain()\n  const analyser = context.createAnalyser()\n  analyser.fftSize = 64\n  source.connect(analyser)\n  analyser.connect(gain)\n  // The data array receive the audio frequencies\n  const data = new Uint8Array(analyser.frequencyBinCount)\n  return {\n    context,\n    source,\n    gain,\n    data,\n    // This function gets called every frame per audio source\n    update: () => {\n      analyser.getByteFrequencyData(data)\n      // Calculate a frequency average\n      return (data.avg = data.reduce((prev, cur) => prev + cur / data.length, 0))\n    },\n  }\n}\n"]},"metadata":{},"sourceType":"module"}