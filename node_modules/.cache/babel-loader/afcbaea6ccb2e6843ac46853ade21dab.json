{"ast":null,"code":"import _objectSpread from \"/Users/jak/repos/karen/kshack/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _taggedTemplateLiteral from \"/Users/jak/repos/karen/kshack/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\";\n\nvar _jsxFileName = \"/Users/jak/repos/karen/kshack/src/components/Artists.js\",\n    _templateObject,\n    _templateObject2,\n    _templateObject3,\n    _s = $RefreshSig$();\n\nimport styled from 'styled-components';\nimport { useMemo, Suspense } from 'react';\nimport { Canvas } from '@react-three/fiber';\nimport glsl from 'glslify'; // import vertex from '../assets/vertex.glsl'\n// import fragment from '../assets/fragment.glsl'\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar ArtistsWrapper = styled.div(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n  position: absolute;\\n  top: 20vw;\\n  left: 5vw;\\n  display: flex;\\n  flex-direction: row;\\n  flex-wrap: wrap;\\n\"])));\n_c = ArtistsWrapper;\nvar ArtistWrapper = styled.div(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\\ndisplay: grid;\\n--column-gap: 2rem;\\n--row-gap: 10vh;\\n--mwidth: 400px;\\n--columns: 3;\\nmax-width: calc(var(--mwidth) * var(--columns) + (var(--columns) - 1) * var(--column-gap));\\nwidth: 100%;\\nmargin: 0 auto;\\ngrid-template-columns: repeat(auto-fill, minmax(calc(var(--mwidth)/2), var(--mwidth)));\\ngrid-column-gap: var(--column-gap);\\ngrid-row-gap: var(--row-gap);\\njustify-content: center;\\npadding: 4rem 0 20rem;\\nmargin-top: 13rem;\\n\"])));\nvar Number = styled.div(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"\\n    position: absolute;\\n\"])));\nexport var ARTISTS = [{\n  id: 1,\n  name: \"ronnie-makebelieve\",\n  album: \"poop bum\",\n  song: \"sleep.wav\",\n  description: \"chill ronnies\"\n}, {\n  id: 2,\n  name: \"sleep-300\",\n  album: \"poop bum\",\n  song: \"sleep.wav\",\n  description: \"chill dudes\"\n}, {\n  id: 3,\n  name: \"sleep-300\",\n  album: \"poop bum\",\n  song: \"sleep.wav\",\n  description: \"chill dudes\"\n}];\nexport function Artists() {\n  var _this = this;\n\n  return /*#__PURE__*/_jsxDEV(ArtistsWrapper, {\n    children: ARTISTS.map(function (artist, index) {\n      return /*#__PURE__*/_jsxDEV(Artist, {\n        artist: artist,\n        index: index\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 20\n      }, _this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n_c2 = Artists;\n\nfunction Artist(_ref) {\n  var artist = _ref.artist,\n      index = _ref.index;\n  var imgSrc = \"\".concat(artist.name, \".png\");\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"item\",\n    children: [/*#__PURE__*/_jsxDEV(ArtistImage, {\n      src: imgSrc,\n      index: index\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"figure\", {\n      className: \"item__fig js-plane\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"aspect\",\n        style: {\n          aspect: \"151.75%\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"item__img\",\n        src: imgSrc,\n        alt: \"\".concat(artist.name, \" image\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"item__pretitle\",\n      children: artist.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"item__title\",\n      children: artist.album\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"item__counter\",\n      children: artist.id < 10 ? \"0\".concat(artist.id) : artist.id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"item__description\",\n      children: artist.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n}\n\n_c3 = Artist;\nvar fragment = \"\\nprecision mediump float;\\n\\nvarying vec2 vUv;\\nvarying float wave;\\n\\nuniform sampler2D uTexture;\\nuniform float uTime;\\nuniform float uProg;\\nuniform float uIndex;\\n  \\nvoid main() {\\n  vec2 uv = vUv;\\n  vec2 dUv = vec2(uv.x, uv.y);\\n  vec3 texture;\\n  \\n  if (uIndex < 3.) {\\n    float w = wave;\\n    float r = texture2D(uTexture, dUv + vec2(0., 0.) + uProg * w * 0.05).r;\\n    float g = texture2D(uTexture, dUv + vec2(0., 0.) + uProg * w * 0.0).g;\\n    float b = texture2D(uTexture, dUv + vec2(0., 0.) + uProg * w * -0.02).b;\\n    texture = vec3(r, g, b);    \\n  } else if (uIndex < 6.) {\\n    float count = 10.;\\n    float smoothness = 0.5;\\n    float pr = smoothstep(-smoothness, 0., dUv.y - (1. - uProg) * (1. + smoothness));\\n    float s = 1. - step(pr, fract(count * dUv.y));\\n    texture = texture2D(uTexture, dUv * s).rgb;\\n  } else {\\n    dUv.y += wave * 0.05;\\n    float r = texture2D(uTexture, dUv + vec2(0., 0.)).r;\\n    float g = texture2D(uTexture, dUv + vec2(0., 0.)).g;\\n    float b = texture2D(uTexture, dUv + vec2(0., -0.02) * uProg).b;\\n    texture = vec3(r, g, b);\\n  }\\n  \\n  gl_FragColor = vec4(texture, 1.);\\n}\";\nvar vertex = \"\\nprecision mediump float;\\nvarying vec2 vUv;\\nvarying float wave;\\nuniform float uTime;\\nuniform float uProg;\\nuniform float uIndex;\\n\\nvec3 mod289(vec3 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 mod289(vec4 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n\\nvec4 permute(vec4 x) {\\n     return mod289(((x*34.0)+1.0)*x);\\n}\\n\\nvec4 taylorInvSqrt(vec4 r)\\n{\\n  return 1.79284291400159 - 0.85373472095314 * r;\\n}\\n\\nfloat snoise(vec3 v)\\n  {\\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\\n\\n// First corner\\n  vec3 i  = floor(v + dot(v, C.yyy) );\\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\\n\\n// Other corners\\n  vec3 g = step(x0.yzx, x0.xyz);\\n  vec3 l = 1.0 - g;\\n  vec3 i1 = min( g.xyz, l.zxy );\\n  vec3 i2 = max( g.xyz, l.zxy );\\n\\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\\n  vec3 x1 = x0 - i1 + C.xxx;\\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\\n\\n// Permutations\\n  i = mod289(i);\\n  vec4 p = permute( permute( permute(\\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\\n\\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\\n  float n_ = 0.142857142857; // 1.0/7.0\\n  vec3  ns = n_ * D.wyz - D.xzx;\\n\\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\\n\\n  vec4 x_ = floor(j * ns.z);\\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\\n\\n  vec4 x = x_ *ns.x + ns.yyyy;\\n  vec4 y = y_ *ns.x + ns.yyyy;\\n  vec4 h = 1.0 - abs(x) - abs(y);\\n\\n  vec4 b0 = vec4( x.xy, y.xy );\\n  vec4 b1 = vec4( x.zw, y.zw );\\n\\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\\n  vec4 s0 = floor(b0)*2.0 + 1.0;\\n  vec4 s1 = floor(b1)*2.0 + 1.0;\\n  vec4 sh = -step(h, vec4(0.0));\\n\\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\\n\\n  vec3 p0 = vec3(a0.xy,h.x);\\n  vec3 p1 = vec3(a0.zw,h.y);\\n  vec3 p2 = vec3(a1.xy,h.z);\\n  vec3 p3 = vec3(a1.zw,h.w);\\n\\n//Normalise gradients\\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\\n  p0 *= norm.x;\\n  p1 *= norm.y;\\n  p2 *= norm.z;\\n  p3 *= norm.w;\\n\\n// Mix final noise value\\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\\n  m = m * m;\\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\\n                                dot(p2,x2), dot(p3,x3) ) );\\n  }\\n \\n\\nvoid main() {\\n  vec3 pos = position;\\n\\n  if (uIndex < 3.) {      \\n    pos.z += snoise(vec3(pos.x * 4. + uTime, pos.y, 0.)) * uProg;\\n    wave = pos.z;\\n    pos.z *= 3.;    \\n  } else if (uIndex < 6.) {\\n    float pr = smoothstep(0., 0.5 - sin(pos.y), uProg) * 5.;\\n    pos.z += pr;\\n  } else {\\n    pos.z += sin(pos.y * 5. + uTime) * 2. * uProg;\\n    wave = pos.z;\\n  }\\n\\n  vUv = uv;\\n\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.);\\n}\\n\";\n\nfunction ArtistImage(_ref2) {\n  _s();\n\n  var src = _ref2.src,\n      index = _ref2.index;\n  console.log('fragment', fragment);\n  var data = useMemo(function () {\n    return {\n      uniforms: {\n        uTexture: {\n          value: 0\n        },\n        uTime: {\n          value: 0\n        },\n        uProg: {\n          value: 0\n        },\n        uIndex: {\n          value: index\n        }\n      },\n      fragmentShader: glsl(fragment),\n      vertexShader: glsl(vertex)\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Canvas, {\n    children: [/*#__PURE__*/_jsxDEV(\"ambientLight\", {\n      intensity: 0.1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"directionalLight\", {\n      color: \"red\",\n      position: [0, 0, 5]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"boxGeometry\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"shaderMaterial\", _objectSpread({\n        attach: \"material\"\n      }, data), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 248,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ArtistImage, \"jwuu1hJIzb+z9O8CErpZ1XdXNoc=\");\n\n_c4 = ArtistImage;\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"ArtistsWrapper\");\n$RefreshReg$(_c2, \"Artists\");\n$RefreshReg$(_c3, \"Artist\");\n$RefreshReg$(_c4, \"ArtistImage\");","map":{"version":3,"sources":["/Users/jak/repos/karen/kshack/src/components/Artists.js"],"names":["styled","useMemo","Suspense","Canvas","glsl","ArtistsWrapper","div","ArtistWrapper","Number","ARTISTS","id","name","album","song","description","Artists","map","artist","index","Artist","imgSrc","aspect","fragment","vertex","ArtistImage","src","console","log","data","uniforms","uTexture","value","uTime","uProg","uIndex","fragmentShader","vertexShader"],"mappings":"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","sourcesContent":["import styled from 'styled-components'\nimport { useMemo, Suspense } from 'react'\nimport { Canvas } from '@react-three/fiber'\nimport glsl from 'glslify';\n\n// import vertex from '../assets/vertex.glsl'\n// import fragment from '../assets/fragment.glsl'\n\nconst ArtistsWrapper = styled.div`\n  position: absolute;\n  top: 20vw;\n  left: 5vw;\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n`\n\nconst ArtistWrapper = styled.div`\ndisplay: grid;\n--column-gap: 2rem;\n--row-gap: 10vh;\n--mwidth: 400px;\n--columns: 3;\nmax-width: calc(var(--mwidth) * var(--columns) + (var(--columns) - 1) * var(--column-gap));\nwidth: 100%;\nmargin: 0 auto;\ngrid-template-columns: repeat(auto-fill, minmax(calc(var(--mwidth)/2), var(--mwidth)));\ngrid-column-gap: var(--column-gap);\ngrid-row-gap: var(--row-gap);\njustify-content: center;\npadding: 4rem 0 20rem;\nmargin-top: 13rem;\n`\nconst Number = styled.div`\n    position: absolute;\n`\n\nexport const ARTISTS = [\n  { id: 1, name: \"ronnie-makebelieve\", album: \"poop bum\", song: \"sleep.wav\", description: \"chill ronnies\" },\n  { id: 2, name: \"sleep-300\", album: \"poop bum\", song: \"sleep.wav\", description: \"chill dudes\" },\n  { id: 3, name: \"sleep-300\", album: \"poop bum\",  song: \"sleep.wav\", description: \"chill dudes\" },\n];\n\nexport function Artists() {\n  return (\n    <ArtistsWrapper>\n        {ARTISTS.map((artist, index) => {\n            return <Artist artist={artist} index={index} key={index} />\n        })}\n    </ArtistsWrapper>\n  )\n}\n\nfunction Artist({artist, index}) {\n    const imgSrc = `${artist.name}.png` \n    return (\n        <div className=\"item\" >\n          <ArtistImage src={imgSrc} index={index} />\n          <figure className=\"item__fig js-plane\">\n            <div className=\"aspect\" style={{aspect: \"151.75%\"}}></div>\n            <img className=\"item__img\" src={imgSrc} alt={`${artist.name} image`} />\n          </figure>\n          <span className=\"item__pretitle\">{artist.name}</span>\n          <h2 className=\"item__title\">{artist.album}</h2>\n          <span className=\"item__counter\">{artist.id < 10 ? `0${artist.id}` : artist.id}</span>\n          <p className=\"item__description\">{artist.description}</p>\n        </div>\n    )\n}\n\nconst fragment = `\nprecision mediump float;\n\nvarying vec2 vUv;\nvarying float wave;\n\nuniform sampler2D uTexture;\nuniform float uTime;\nuniform float uProg;\nuniform float uIndex;\n  \nvoid main() {\n  vec2 uv = vUv;\n  vec2 dUv = vec2(uv.x, uv.y);\n  vec3 texture;\n  \n  if (uIndex < 3.) {\n    float w = wave;\n    float r = texture2D(uTexture, dUv + vec2(0., 0.) + uProg * w * 0.05).r;\n    float g = texture2D(uTexture, dUv + vec2(0., 0.) + uProg * w * 0.0).g;\n    float b = texture2D(uTexture, dUv + vec2(0., 0.) + uProg * w * -0.02).b;\n    texture = vec3(r, g, b);    \n  } else if (uIndex < 6.) {\n    float count = 10.;\n    float smoothness = 0.5;\n    float pr = smoothstep(-smoothness, 0., dUv.y - (1. - uProg) * (1. + smoothness));\n    float s = 1. - step(pr, fract(count * dUv.y));\n    texture = texture2D(uTexture, dUv * s).rgb;\n  } else {\n    dUv.y += wave * 0.05;\n    float r = texture2D(uTexture, dUv + vec2(0., 0.)).r;\n    float g = texture2D(uTexture, dUv + vec2(0., 0.)).g;\n    float b = texture2D(uTexture, dUv + vec2(0., -0.02) * uProg).b;\n    texture = vec3(r, g, b);\n  }\n  \n  gl_FragColor = vec4(texture, 1.);\n}`\n\nconst vertex = `\nprecision mediump float;\nvarying vec2 vUv;\nvarying float wave;\nuniform float uTime;\nuniform float uProg;\nuniform float uIndex;\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 mod289(vec4 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec4 permute(vec4 x) {\n     return mod289(((x*34.0)+1.0)*x);\n}\n\nvec4 taylorInvSqrt(vec4 r)\n{\n  return 1.79284291400159 - 0.85373472095314 * r;\n}\n\nfloat snoise(vec3 v)\n  {\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n// First corner\n  vec3 i  = floor(v + dot(v, C.yyy) );\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n// Other corners\n  vec3 g = step(x0.yzx, x0.xyz);\n  vec3 l = 1.0 - g;\n  vec3 i1 = min( g.xyz, l.zxy );\n  vec3 i2 = max( g.xyz, l.zxy );\n\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\n  vec3 x1 = x0 - i1 + C.xxx;\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\n\n// Permutations\n  i = mod289(i);\n  vec4 p = permute( permute( permute(\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\n  float n_ = 0.142857142857; // 1.0/7.0\n  vec3  ns = n_ * D.wyz - D.xzx;\n\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\n\n  vec4 x_ = floor(j * ns.z);\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n  vec4 x = x_ *ns.x + ns.yyyy;\n  vec4 y = y_ *ns.x + ns.yyyy;\n  vec4 h = 1.0 - abs(x) - abs(y);\n\n  vec4 b0 = vec4( x.xy, y.xy );\n  vec4 b1 = vec4( x.zw, y.zw );\n\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\n  vec4 s0 = floor(b0)*2.0 + 1.0;\n  vec4 s1 = floor(b1)*2.0 + 1.0;\n  vec4 sh = -step(h, vec4(0.0));\n\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n  vec3 p0 = vec3(a0.xy,h.x);\n  vec3 p1 = vec3(a0.zw,h.y);\n  vec3 p2 = vec3(a1.xy,h.z);\n  vec3 p3 = vec3(a1.zw,h.w);\n\n//Normalise gradients\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n  p0 *= norm.x;\n  p1 *= norm.y;\n  p2 *= norm.z;\n  p3 *= norm.w;\n\n// Mix final noise value\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n  m = m * m;\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n                                dot(p2,x2), dot(p3,x3) ) );\n  }\n \n\nvoid main() {\n  vec3 pos = position;\n\n  if (uIndex < 3.) {      \n    pos.z += snoise(vec3(pos.x * 4. + uTime, pos.y, 0.)) * uProg;\n    wave = pos.z;\n    pos.z *= 3.;    \n  } else if (uIndex < 6.) {\n    float pr = smoothstep(0., 0.5 - sin(pos.y), uProg) * 5.;\n    pos.z += pr;\n  } else {\n    pos.z += sin(pos.y * 5. + uTime) * 2. * uProg;\n    wave = pos.z;\n  }\n\n  vUv = uv;\n\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.);\n}\n`\nfunction ArtistImage({src, index}) {\n    console.log('fragment',fragment)\n    const data = useMemo(\n        () => ({\n            uniforms: {\n                uTexture: { value: 0 },\n                uTime: { value: 0 },\n                uProg: { value: 0 },\n                uIndex: { value: index },\n            },\n            fragmentShader: glsl(fragment),\n            vertexShader: glsl(vertex)\n        }),\n        []\n    )\n    \n  return (\n    <Canvas>\n    <ambientLight intensity={0.1} />\n    <directionalLight color=\"red\" position={[0, 0, 5]} />\n    <mesh>\n      <boxGeometry />\n      <shaderMaterial attach=\"material\" {...data} />\n    </mesh>\n  </Canvas>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}