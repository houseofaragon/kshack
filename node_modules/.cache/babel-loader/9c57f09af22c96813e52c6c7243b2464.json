{"ast":null,"code":"import _asyncToGenerator from \"/Users/jak/repos/karen/kshack/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectSpread from \"/Users/jak/repos/karen/kshack/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/Users/jak/repos/karen/kshack/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _slicedToArray from \"/Users/jak/repos/karen/kshack/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar _excluded = [\"url\", \"y\", \"space\", \"width\", \"height\", \"obj\"];\n\nvar _jsxFileName = \"/Users/jak/repos/karen/kshack/src/components/ArtistPage.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport _regeneratorRuntime from \"/Users/jak/repos/karen/kshack/node_modules/@babel/runtime/regenerator/index.js\";\nimport * as THREE from 'three';\nimport { Suspense, useEffect, useRef } from 'react';\nimport { Canvas, useFrame } from '@react-three/fiber';\nimport { useAsset } from 'use-asset';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function SoundVisualizer(props) {\n  _s();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      ready = _useState2[0],\n      set = _useState2[1];\n\n  return /*#__PURE__*/_jsxDEV(Canvas, {\n    shadows: true,\n    dpr: [1, 2],\n    camera: {\n      position: [-1, 1.5, 2],\n      fov: 25\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"spotLight\", {\n      position: [-4, 4, -4],\n      angle: 0.06,\n      penumbra: 1,\n      castShadow: true,\n      \"shadow-mapSize\": [2048, 2048]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Suspense, {\n      fallback: null,\n      children: [/*#__PURE__*/_jsxDEV(Track, {\n        \"position-z\": 0,\n        url: \"/sleep.wav\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Zoom, {\n        url: \"/sleep.wav\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"mesh\", {\n      receiveShadow: true,\n      rotation: [-Math.PI / 2, 0, 0],\n      position: [0, -0.025, 0],\n      children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"shadowMaterial\", {\n        transparent: true,\n        opacity: 0.15\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SoundVisualizer, \"0rziXNk8YggDzbOZSAdg6e4/QgY=\");\n\n_c = SoundVisualizer;\n\nfunction PlayButton() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fullscreen bg \".concat(ready ? 'ready' : 'notready', \" \").concat(ready && 'clicked'),\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stack\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: function onClick() {\n          return set(true);\n        },\n        children: \"\\u25B6\\uFE0F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n}\n\n_c2 = PlayButton;\n\nfunction Track(_ref) {\n  _s2();\n\n  var url = _ref.url,\n      _ref$y = _ref.y,\n      y = _ref$y === void 0 ? 2500 : _ref$y,\n      _ref$space = _ref.space,\n      space = _ref$space === void 0 ? 1.8 : _ref$space,\n      _ref$width = _ref.width,\n      width = _ref$width === void 0 ? 0.01 : _ref$width,\n      _ref$height = _ref.height,\n      height = _ref$height === void 0 ? 0.05 : _ref$height,\n      _ref$obj = _ref.obj,\n      obj = _ref$obj === void 0 ? new THREE.Object3D() : _ref$obj,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  var ref = useRef(); // use-asset is the library that r3f uses internally for useLoader. It caches promises and\n  // integrates them with React suspense. You can use it as-is with or without r3f.\n\n  var _useAsset = useAsset(function () {\n    return createAudio(url);\n  }, url),\n      gain = _useAsset.gain,\n      context = _useAsset.context,\n      update = _useAsset.update,\n      data = _useAsset.data;\n\n  useEffect(function () {\n    // Connect the gain node, which plays the audio\n    gain.connect(context.destination); // Disconnect it on unmount\n\n    return function () {\n      return gain.disconnect();\n    };\n  }, [gain, context]);\n  useFrame(function (state) {\n    var avg = update(); // Distribute the instanced planes according to the frequency daza\n\n    for (var i = 0; i < data.length; i++) {\n      obj.position.set(i * width * space - data.length * width * space / 2, data[i] / y, 0);\n      obj.updateMatrix();\n      ref.current.setMatrixAt(i, obj.matrix);\n    } // Set the hue according to the frequency average\n\n\n    ref.current.material.color.setHSL(avg / 500, 0.75, 0.75);\n    ref.current.instanceMatrix.needsUpdate = true;\n  });\n  return /*#__PURE__*/_jsxDEV(\"instancedMesh\", _objectSpread(_objectSpread({\n    castShadow: true,\n    ref: ref,\n    args: [null, null, data.length]\n  }, props), {}, {\n    children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n      args: [width, height]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"meshBasicMaterial\", {\n      toneMapped: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }), void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(Track, \"bOH+CqmqyJgfnSF3t4JevugIY04=\", false, function () {\n  return [useAsset, useFrame];\n});\n\n_c3 = Track;\n\nfunction Zoom(_ref2) {\n  _s3();\n\n  var url = _ref2.url;\n\n  // This will *not* re-create a new audio source, suspense is always cached,\n  // so this will just access (or create and then cache) the source according to the url\n  var _useAsset2 = useAsset(function () {\n    return createAudio(url);\n  }, url),\n      data = _useAsset2.data;\n\n  return useFrame(function (state) {\n    // Set the cameras field of view according to the frequency average\n    state.camera.fov = 25 - data.avg / 15;\n    state.camera.updateProjectionMatrix();\n  });\n}\n\n_s3(Zoom, \"9IYfCxx86IceS7ZsFzSJEeDqVE8=\", false, function () {\n  return [useAsset, useFrame];\n});\n\n_c4 = Zoom;\n\nfunction createAudio(_x) {\n  return _createAudio.apply(this, arguments);\n}\n\nfunction _createAudio() {\n  _createAudio = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url) {\n    var res, buffer, context, source, gain, analyser, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch(url);\n\n          case 2:\n            res = _context.sent;\n            _context.next = 5;\n            return res.arrayBuffer();\n\n          case 5:\n            buffer = _context.sent;\n            context = new (window.AudioContext || window.webkitAudioContext)();\n            source = context.createBufferSource();\n            _context.next = 10;\n            return new Promise(function (res) {\n              return context.decodeAudioData(buffer, res);\n            });\n\n          case 10:\n            source.buffer = _context.sent;\n            source.loop = true; // This is why it doesn't run in Safari 🍏🐛. Start has to be called in an onClick event\n            // which makes it too awkward for a little demo since you need to load the async data first\n\n            source.start(0); // Create gain node and an analyser\n\n            gain = context.createGain();\n            analyser = context.createAnalyser();\n            analyser.fftSize = 64;\n            source.connect(analyser);\n            analyser.connect(gain); // The data array receive the audio frequencies\n\n            data = new Uint8Array(analyser.frequencyBinCount);\n            return _context.abrupt(\"return\", {\n              context: context,\n              source: source,\n              gain: gain,\n              data: data,\n              // This function gets called every frame per audio source\n              update: function update() {\n                analyser.getByteFrequencyData(data); // Calculate a frequency average\n\n                // Calculate a frequency average\n                return data.avg = data.reduce(function (prev, cur) {\n                  return prev + cur / data.length;\n                }, 0);\n              }\n            });\n\n          case 20:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _createAudio.apply(this, arguments);\n}\n\nvar _c, _c2, _c3, _c4;\n\n$RefreshReg$(_c, \"SoundVisualizer\");\n$RefreshReg$(_c2, \"PlayButton\");\n$RefreshReg$(_c3, \"Track\");\n$RefreshReg$(_c4, \"Zoom\");","map":{"version":3,"sources":["/Users/jak/repos/karen/kshack/src/components/ArtistPage.js"],"names":["THREE","Suspense","useEffect","useRef","Canvas","useFrame","useAsset","SoundVisualizer","props","useState","ready","set","position","fov","Math","PI","PlayButton","Track","url","y","space","width","height","obj","Object3D","ref","createAudio","gain","context","update","data","connect","destination","disconnect","state","avg","i","length","updateMatrix","current","setMatrixAt","matrix","material","color","setHSL","instanceMatrix","needsUpdate","Zoom","camera","updateProjectionMatrix","fetch","res","arrayBuffer","buffer","window","AudioContext","webkitAudioContext","source","createBufferSource","Promise","decodeAudioData","loop","start","createGain","analyser","createAnalyser","fftSize","Uint8Array","frequencyBinCount","getByteFrequencyData","reduce","prev","cur"],"mappings":"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","sourcesContent":["import * as THREE from 'three'\nimport { Suspense, useEffect, useRef } from 'react'\nimport { Canvas, useFrame } from '@react-three/fiber'\nimport { useAsset } from 'use-asset'\n\nexport default function SoundVisualizer(props) {\n  const [ready, set] = useState(false)\n  \n  return (\n    <Canvas shadows dpr={[1, 2]} camera={{ position: [-1, 1.5, 2], fov: 25 }}>\n      <spotLight position={[-4, 4, -4]} angle={0.06} penumbra={1} castShadow shadow-mapSize={[2048, 2048]} />\n      <Suspense fallback={null}>\n        <Track position-z={0} url=\"/sleep.wav\" />\n        <Zoom url=\"/sleep.wav\" />\n      </Suspense>\n      <mesh receiveShadow rotation={[-Math.PI / 2, 0, 0]} position={[0, -0.025, 0]}>\n        <planeGeometry />\n        <shadowMaterial transparent opacity={0.15} />\n      </mesh>\n    </Canvas>\n  )\n}\n\nfunction PlayButton() {\n  return (\n    <div className={`fullscreen bg ${ready ? 'ready' : 'notready'} ${ready && 'clicked'}`}>\n      <div className=\"stack\">\n        <button onClick={() => set(true)}>▶️</button>\n      </div>\n    </div>\n  )\n}\nfunction Track({ url, y = 2500, space = 1.8, width = 0.01, height = 0.05, obj = new THREE.Object3D(), ...props }) {\n  const ref = useRef()\n  // use-asset is the library that r3f uses internally for useLoader. It caches promises and\n  // integrates them with React suspense. You can use it as-is with or without r3f.\n  const { gain, context, update, data } = useAsset(() => createAudio(url), url)\n  useEffect(() => {\n    // Connect the gain node, which plays the audio\n    gain.connect(context.destination)\n    // Disconnect it on unmount\n    return () => gain.disconnect()\n  }, [gain, context])\n\n  useFrame((state) => {\n    let avg = update()\n    // Distribute the instanced planes according to the frequency daza\n    for (let i = 0; i < data.length; i++) {\n      obj.position.set(i * width * space - (data.length * width * space) / 2, data[i] / y, 0)\n      obj.updateMatrix()\n      ref.current.setMatrixAt(i, obj.matrix)\n    }\n    // Set the hue according to the frequency average\n    ref.current.material.color.setHSL(avg / 500, 0.75, 0.75)\n    ref.current.instanceMatrix.needsUpdate = true\n  })\n  return (\n    <instancedMesh castShadow ref={ref} args={[null, null, data.length]} {...props}>\n      <planeGeometry args={[width, height]} />\n      <meshBasicMaterial toneMapped={false} />\n    </instancedMesh>\n  )\n}\n\nfunction Zoom({ url }) {\n  // This will *not* re-create a new audio source, suspense is always cached,\n  // so this will just access (or create and then cache) the source according to the url\n  const { data } = useAsset(() => createAudio(url), url)\n  return useFrame((state) => {\n    // Set the cameras field of view according to the frequency average\n    state.camera.fov = 25 - data.avg / 15\n    state.camera.updateProjectionMatrix()\n  })\n}\n\nasync function createAudio(url) {\n  // Fetch audio data and create a buffer source\n  const res = await fetch(url)\n  const buffer = await res.arrayBuffer()\n  const context = new (window.AudioContext || window.webkitAudioContext)()\n  const source = context.createBufferSource()\n  source.buffer = await new Promise((res) => context.decodeAudioData(buffer, res))\n  source.loop = true\n  // This is why it doesn't run in Safari 🍏🐛. Start has to be called in an onClick event\n  // which makes it too awkward for a little demo since you need to load the async data first\n  source.start(0)\n  // Create gain node and an analyser\n  const gain = context.createGain()\n  const analyser = context.createAnalyser()\n  analyser.fftSize = 64\n  source.connect(analyser)\n  analyser.connect(gain)\n  // The data array receive the audio frequencies\n  const data = new Uint8Array(analyser.frequencyBinCount)\n  return {\n    context,\n    source,\n    gain,\n    data,\n    // This function gets called every frame per audio source\n    update: () => {\n      analyser.getByteFrequencyData(data)\n      // Calculate a frequency average\n      return (data.avg = data.reduce((prev, cur) => prev + cur / data.length, 0))\n    },\n  }\n}\n"]},"metadata":{},"sourceType":"module"}