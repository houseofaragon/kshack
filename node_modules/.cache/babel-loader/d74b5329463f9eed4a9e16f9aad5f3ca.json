{"ast":null,"code":"import _objectSpread from \"/Users/jak/repos/karen/kshack/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\n\nvar _jsxFileName = \"/Users/jak/repos/karen/kshack/src/components/ArtistImage.js\",\n    _s = $RefreshSig$();\n\nimport * as THREE from 'three';\nimport { Canvas, useLoader } from '@react-three/fiber';\nimport { useMemo } from 'react';\nimport { TextureLoader } from \"three/src/loaders/TextureLoader\";\nimport vertex from '../assets/vertex.glsl';\nimport fragment from '../assets/fragment.glsl';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar fragmentShader = \"\\nvarying vec3 Normal;\\nvarying vec3 Position;\\n\\nuniform vec3 Ka;\\nuniform vec3 Kd;\\nuniform vec3 Ks;\\nuniform vec4 LightPosition;\\nuniform vec3 LightIntensity;\\nuniform float Shininess;\\n\\nvec3 phong() {\\n  vec3 n = normalize(Normal);\\n  vec3 s = normalize(vec3(LightPosition) - Position);\\n  vec3 v = normalize(vec3(-Position));\\n  vec3 r = reflect(-s, n);\\n\\n  vec3 ambient = Ka;\\n  vec3 diffuse = Kd * max(dot(s, n), 0.0);\\n  vec3 specular = Ks * pow(max(dot(r, v), 0.0), Shininess);\\n\\n  return LightIntensity * (ambient + diffuse + specular);\\n}\\n\\nvoid main() {\\n  vec3 blue = vec3(0.0, 0.0, 1.0);\\n  gl_FragColor = vec4(blue*phong(), 1.0);\\n}\";\nvar vertexShader = \"\\nvarying vec3 Normal;\\nvarying vec3 Position;\\n\\nvoid main() {\\n  Normal = normalize(normalMatrix * normal);\\n  Position = vec3(modelViewMatrix * vec4(position, 1.0));\\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\\n}\\n\";\n/*\n Load texture into shader\n https://codesandbox.io/s/divine-shape-wqf6f?from-embed=&file=/src/App.js:90-155\n*/\n\nexport function ArtistImage(_ref) {\n  _s();\n\n  var src = _ref.src,\n      index = _ref.index;\n  var texture = useLoader(THREE.TextureLoader, src);\n  console.log('Texture', texture);\n  var data = useMemo(function () {\n    return {\n      uniforms: {\n        uTexture: {\n          value: {\n            texture: _objectSpread(_objectSpread({}, texture), {}, {\n              minFilter: THREE.LinearFilter,\n              generateMipmaps: false\n            })\n          }\n        },\n        uTime: {\n          value: 0\n        },\n        uProg: {\n          value: 0\n        },\n        uIndex: {\n          value: index\n        }\n      },\n      fragment: fragment,\n      vertexShader: vertexShader\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Canvas, {\n    children: /*#__PURE__*/_jsxDEV(\"mesh\", {\n      children: [/*#__PURE__*/_jsxDEV(\"planeBufferGeometry\", {\n        attach: \"geometry\",\n        args: [32, 32]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"shaderMaterial\", _objectSpread({\n        attach: \"material\"\n      }, data), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 3\n  }, this);\n}\n\n_s(ArtistImage, \"C4xoomjLggMQljnwaCNQiz3g+lI=\", false, function () {\n  return [useLoader];\n});\n\n_c = ArtistImage;\n\nvar _c;\n\n$RefreshReg$(_c, \"ArtistImage\");","map":{"version":3,"sources":["/Users/jak/repos/karen/kshack/src/components/ArtistImage.js"],"names":["THREE","Canvas","useLoader","useMemo","TextureLoader","vertex","fragment","fragmentShader","vertexShader","ArtistImage","src","index","texture","console","log","data","uniforms","uTexture","value","minFilter","LinearFilter","generateMipmaps","uTime","uProg","uIndex"],"mappings":";;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAT,EAAiBC,SAAjB,QAAkC,oBAAlC;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,SAASC,aAAT,QAA8B,iCAA9B;AAEA,OAAOC,MAAP,MAAmB,uBAAnB;AACA,OAAOC,QAAP,MAAqB,yBAArB;;AAEA,IAAMC,cAAc,gpBAApB;AA6BA,IAAMC,YAAY,6PAAlB;AAUA;AACA;AACA;AACA;;AACA,OAAO,SAASC,WAAT,OAAmC;AAAA;;AAAA,MAAbC,GAAa,QAAbA,GAAa;AAAA,MAARC,KAAQ,QAARA,KAAQ;AACxC,MAAMC,OAAO,GAAGV,SAAS,CAACF,KAAK,CAACI,aAAP,EAAsBM,GAAtB,CAAzB;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,OAAvB;AACA,MAAMG,IAAI,GAAGZ,OAAO,CAChB;AAAA,WAAO;AACHa,MAAAA,QAAQ,EAAE;AACNC,QAAAA,QAAQ,EAAE;AAAEC,UAAAA,KAAK,EAAE;AACfN,YAAAA,OAAO,kCACAA,OADA;AAEHO,cAAAA,SAAS,EAAEnB,KAAK,CAACoB,YAFd;AAGHC,cAAAA,eAAe,EAAE;AAHd;AADQ;AAAT,SADJ;AAQNC,QAAAA,KAAK,EAAE;AAAEJ,UAAAA,KAAK,EAAE;AAAT,SARD;AASNK,QAAAA,KAAK,EAAE;AAAEL,UAAAA,KAAK,EAAE;AAAT,SATD;AAUNM,QAAAA,MAAM,EAAE;AAAEN,UAAAA,KAAK,EAAEP;AAAT;AAVF,OADP;AAaHL,MAAAA,QAAQ,EAARA,QAbG;AAcHE,MAAAA,YAAY,EAAZA;AAdG,KAAP;AAAA,GADgB,EAiBhB,EAjBgB,CAApB;AAoBF,sBACE,QAAC,MAAD;AAAA,2BACI;AAAA,8BACA;AAAqB,QAAA,MAAM,EAAC,UAA5B;AAAuC,QAAA,IAAI,EAAE,CAAC,EAAD,EAAK,EAAL;AAA7C;AAAA;AAAA;AAAA;AAAA,cADA,eAEA;AAAgB,QAAA,MAAM,EAAC;AAAvB,SAAsCO,IAAtC;AAAA;AAAA;AAAA;AAAA,cAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADF;AASC;;GAhCeN,W;UACEP,S;;;KADFO,W","sourcesContent":["import * as THREE from 'three'\nimport { Canvas, useLoader } from '@react-three/fiber'\nimport { useMemo } from 'react'\nimport { TextureLoader } from \"three/src/loaders/TextureLoader\";\n\nimport vertex from '../assets/vertex.glsl'\nimport fragment from '../assets/fragment.glsl'\n\nconst fragmentShader = `\nvarying vec3 Normal;\nvarying vec3 Position;\n\nuniform vec3 Ka;\nuniform vec3 Kd;\nuniform vec3 Ks;\nuniform vec4 LightPosition;\nuniform vec3 LightIntensity;\nuniform float Shininess;\n\nvec3 phong() {\n  vec3 n = normalize(Normal);\n  vec3 s = normalize(vec3(LightPosition) - Position);\n  vec3 v = normalize(vec3(-Position));\n  vec3 r = reflect(-s, n);\n\n  vec3 ambient = Ka;\n  vec3 diffuse = Kd * max(dot(s, n), 0.0);\n  vec3 specular = Ks * pow(max(dot(r, v), 0.0), Shininess);\n\n  return LightIntensity * (ambient + diffuse + specular);\n}\n\nvoid main() {\n  vec3 blue = vec3(0.0, 0.0, 1.0);\n  gl_FragColor = vec4(blue*phong(), 1.0);\n}`\n\nconst vertexShader = `\nvarying vec3 Normal;\nvarying vec3 Position;\n\nvoid main() {\n  Normal = normalize(normalMatrix * normal);\n  Position = vec3(modelViewMatrix * vec4(position, 1.0));\n  gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n}\n`\n/*\n Load texture into shader\n https://codesandbox.io/s/divine-shape-wqf6f?from-embed=&file=/src/App.js:90-155\n*/\nexport function ArtistImage({src, index}) {\n  const texture = useLoader(THREE.TextureLoader, src);\n  console.log('Texture', texture)\n  const data = useMemo(\n      () => ({\n          uniforms: {\n              uTexture: { value: {\n                  texture: {\n                      ...texture,\n                      minFilter: THREE.LinearFilter,\n                      generateMipmaps: false,\n                  } \n              }},\n              uTime: { value: 0 },\n              uProg: { value: 0 },\n              uIndex: { value: index },\n          },\n          fragment,\n          vertexShader\n      }),\n      []\n  )\n  \nreturn (\n  <Canvas>\n      <mesh>\n      <planeBufferGeometry attach=\"geometry\" args={[32, 32]} />\n      <shaderMaterial attach=\"material\" {...data} />\n      {/* <meshBasicMaterial attach=\"material\" map={texture} /> */}\n      </mesh>\n  </Canvas>\n)\n}\n"]},"metadata":{},"sourceType":"module"}