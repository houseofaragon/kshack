{"ast":null,"code":"import _objectSpread from\"/Users/jak/repos/karen/kshack/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import*as THREE from'three';import{Canvas,useLoader}from'@react-three/fiber';import{useMemo}from'react';// import glsl from 'glslify';\n// import vertexShader from '../assets/vertex.glsl'\n// import fragmentShader from '../assets/fragment.glsl'\n// const fragmentShader = `\n// varying vec3 Normal;\n// varying vec3 Position;\n// uniform vec3 Ka;\n// uniform vec3 Kd;\n// uniform vec3 Ks;\n// uniform vec4 LightPosition;\n// uniform vec3 LightIntensity;\n// uniform float Shininess;\n// vec3 phong() {\n//   vec3 n = normalize(Normal);\n//   vec3 s = normalize(vec3(LightPosition) - Position);\n//   vec3 v = normalize(vec3(-Position));\n//   vec3 r = reflect(-s, n);\n//   vec3 ambient = Ka;\n//   vec3 diffuse = Kd * max(dot(s, n), 0.0);\n//   vec3 specular = Ks * pow(max(dot(r, v), 0.0), Shininess);\n//   return LightIntensity * (ambient + diffuse + specular);\n// }\n// void main() {\n//   vec3 blue = vec3(0.0, 0.0, 1.0);\n//   gl_FragColor = vec4(blue*phong(), 1.0);\n// }`\n// const vertexShader = `\n// varying vec3 Normal;\n// varying vec3 Position;\n// void main() {\n//   Normal = normalize(normalMatrix * normal);\n//   Position = vec3(modelViewMatrix * vec4(position, 1.0));\n//   gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n// }\n/*\n Load texture into shader\n https://codesandbox.io/s/divine-shape-wqf6f?from-embed=&file=/src/App.js:90-155\n*/import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export function ArtistImage(_ref){var src=_ref.src,index=_ref.index;var texture=useLoader(THREE.TextureLoader,src);var data=useMemo(function(){return{uniforms:{uTexture:{value:{texture:texture}},uTime:{value:0},uProg:{value:0},uIndex:{value:index}},//   fragmentShader: glsl(fragmentShader),\n//   vertexShader: glsl(vertexShader)\nvertexShader:document.getElementById('vertexShader').textContent,fragmentShader:document.getElementById('fragmentShader').textContent};},[]);return/*#__PURE__*/_jsx(Canvas,{children:/*#__PURE__*/_jsxs(\"mesh\",{children:[/*#__PURE__*/_jsx(\"planeBufferGeometry\",{attach:\"geometry\",args:[400,400]}),/*#__PURE__*/_jsx(\"shaderMaterial\",_objectSpread({attach:\"material\"},data))]})});}","map":{"version":3,"sources":["/Users/jak/repos/karen/kshack/src/components/ArtistImage.js"],"names":["THREE","Canvas","useLoader","useMemo","ArtistImage","src","index","texture","TextureLoader","data","uniforms","uTexture","value","uTime","uProg","uIndex","vertexShader","document","getElementById","textContent","fragmentShader"],"mappings":"kHAAA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,OAAvB,CACA,OAASC,MAAT,CAAiBC,SAAjB,KAAkC,oBAAlC,CACA,OAASC,OAAT,KAAwB,OAAxB,CACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA,E,wFACA,MAAO,SAASC,CAAAA,WAAT,MAAmC,IAAbC,CAAAA,GAAa,MAAbA,GAAa,CAARC,KAAQ,MAARA,KAAQ,CACxC,GAAMC,CAAAA,OAAO,CAAGL,SAAS,CAACF,KAAK,CAACQ,aAAP,CAAsBH,GAAtB,CAAzB,CACA,GAAMI,CAAAA,IAAI,CAAGN,OAAO,CAChB,iBAAO,CACHO,QAAQ,CAAE,CACNC,QAAQ,CAAE,CAAEC,KAAK,CAAE,CACfL,OAAO,CAAPA,OADe,CAAT,CADJ,CAINM,KAAK,CAAE,CAAED,KAAK,CAAE,CAAT,CAJD,CAKNE,KAAK,CAAE,CAAEF,KAAK,CAAE,CAAT,CALD,CAMNG,MAAM,CAAE,CAAEH,KAAK,CAAEN,KAAT,CANF,CADP,CASL;AACA;AACAU,YAAY,CAAEC,QAAQ,CAACC,cAAT,CAAwB,cAAxB,EAAwCC,WAXjD,CAYLC,cAAc,CAAEH,QAAQ,CAACC,cAAT,CAAwB,gBAAxB,EAA0CC,WAZrD,CAAP,EADgB,CAehB,EAfgB,CAApB,CAkBF,mBACE,KAAC,MAAD,wBACI,qCACA,4BAAqB,MAAM,CAAC,UAA5B,CAAuC,IAAI,CAAE,CAAC,GAAD,CAAM,GAAN,CAA7C,EADA,cAEA,qCAAgB,MAAM,CAAC,UAAvB,EAAsCV,IAAtC,EAFA,GADJ,EADF,CASC","sourcesContent":["import * as THREE from 'three'\nimport { Canvas, useLoader } from '@react-three/fiber'\nimport { useMemo } from 'react'\n// import glsl from 'glslify';\n\n// import vertexShader from '../assets/vertex.glsl'\n// import fragmentShader from '../assets/fragment.glsl'\n\n// const fragmentShader = `\n// varying vec3 Normal;\n// varying vec3 Position;\n\n// uniform vec3 Ka;\n// uniform vec3 Kd;\n// uniform vec3 Ks;\n// uniform vec4 LightPosition;\n// uniform vec3 LightIntensity;\n// uniform float Shininess;\n\n// vec3 phong() {\n//   vec3 n = normalize(Normal);\n//   vec3 s = normalize(vec3(LightPosition) - Position);\n//   vec3 v = normalize(vec3(-Position));\n//   vec3 r = reflect(-s, n);\n\n//   vec3 ambient = Ka;\n//   vec3 diffuse = Kd * max(dot(s, n), 0.0);\n//   vec3 specular = Ks * pow(max(dot(r, v), 0.0), Shininess);\n\n//   return LightIntensity * (ambient + diffuse + specular);\n// }\n\n// void main() {\n//   vec3 blue = vec3(0.0, 0.0, 1.0);\n//   gl_FragColor = vec4(blue*phong(), 1.0);\n// }`\n\n// const vertexShader = `\n// varying vec3 Normal;\n// varying vec3 Position;\n\n// void main() {\n//   Normal = normalize(normalMatrix * normal);\n//   Position = vec3(modelViewMatrix * vec4(position, 1.0));\n//   gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n// }\n\n/*\n Load texture into shader\n https://codesandbox.io/s/divine-shape-wqf6f?from-embed=&file=/src/App.js:90-155\n*/\nexport function ArtistImage({src, index}) {\n  const texture = useLoader(THREE.TextureLoader, src);\n  const data = useMemo(\n      () => ({\n          uniforms: {\n              uTexture: { value: {\n                  texture\n              }},\n              uTime: { value: 0 },\n              uProg: { value: 0 },\n              uIndex: { value: index },\n          },\n        //   fragmentShader: glsl(fragmentShader),\n        //   vertexShader: glsl(vertexShader)\n        vertexShader: document.getElementById('vertexShader').textContent,\n        fragmentShader: document.getElementById('fragmentShader').textContent,\n      }),\n      []\n  )\n  \nreturn (\n  <Canvas>\n      <mesh>\n      <planeBufferGeometry attach=\"geometry\" args={[400, 400]} />\n      <shaderMaterial attach=\"material\" {...data} />\n      {/* <meshBasicMaterial attach=\"material\" map={texture} /> */}\n      </mesh>\n  </Canvas>\n)\n}\n"]},"metadata":{},"sourceType":"module"}