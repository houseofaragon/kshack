{"ast":null,"code":"import _slicedToArray from \"/Users/karen/repos/karen/kshack/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"/Users/karen/repos/karen/kshack/src/components/ArtistImage.js\",\n    _s2 = $RefreshSig$();\n\nimport * as THREE from 'three';\nimport { Canvas, useFrame, useLoader } from '@react-three/fiber';\nimport { useMemo, useState, useRef } from 'react';\nimport glsl from 'glslify';\nimport { TextureLoader } from 'three/src/loaders/TextureLoader';\nimport { a } from '@react-spring/three';\nimport gsap from 'gsap';\nimport { fragmentShader, vertexShader } from '../assets/shader.js';\n/*\n Load texture into shader\n https://codesandbox.io/s/divine-shape-wqf6f?from-embed=&file=/src/App.js:90-155\n https://codesandbox.io/s/02-make-some-noise-forked-inj5q?file=/src/gl/index.js\n https://codesandbox.io/s/03-adding-the-texture-forked-h6sup?file=/src/gl/index.js\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function ArtistImage(_ref) {\n  _s2();\n\n  var _this = this,\n      _s = $RefreshSig$();\n\n  var src = _ref.src,\n      index = _ref.index;\n  var imageRef = useRef();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      hover = _useState2[0],\n      setHover = _useState2[1];\n\n  var plane = useMemo(function () {\n    return /*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n      attach: \"geometry\",\n      args: [5, 5, 32, 32]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 31\n    }, _this);\n  });\n  var texture = useMemo(_s(function () {\n    _s();\n\n    return useLoader(TextureLoader, src);\n  }, \"Gb9AtkFU6hmrh2vV1Bb0cKvd7W0=\", false, function () {\n    return [useLoader];\n  }));\n  texture.minFilter = THREE.LinearFilter;\n  texture.generateMipmaps = false;\n  var shaderMaterialData = useMemo(function () {\n    return {\n      uniforms: {\n        uTexture: {\n          value: texture\n        },\n        uTime: {\n          value: 0\n        },\n        uProg: {\n          value: 0\n        },\n        uIndex: {\n          value: index\n        }\n      },\n      fragmentShader: fragmentShader,\n      vertexShader: vertexShader\n    };\n  }, []);\n  var imageRefUniforms =\n  /* https://onion2k.hashnode.dev/using-a-useframe-render-hook-in-react-three-fiber */\n  useFrame(function (state, delta) {\n    if (imageRef && imageRef.current && hover) {\n      imageRef.current.material.uniformsNeedUpdate = true;\n      imageRef.current.material.uniforms.uTime.value += delta / 2;\n    }\n  });\n\n  function handlePointerOver() {\n    setHover(true);\n    console.log(imageRef.current.material.uniforms);\n    gsap.to(imageRef.current.material.uniforms.uProg, {\n      // duration: 1,\n      value: 1,\n      ease: 'power.inOut'\n    });\n  }\n\n  function handlePointerOut() {\n    setHover(false);\n    gsap.to(imageRef.current.material.uniforms.uProg, {\n      // duration: 1,\n      value: 0,\n      ease: 'power.inOut'\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(a.mesh, {\n    ref: imageRef,\n    onPointerOver: function onPointerOver() {\n      return handlePointerOver();\n    },\n    onPointerOut: function onPointerOut() {\n      return handlePointerOut();\n    },\n    children: [plane, /*#__PURE__*/_jsxDEV(\"shaderMaterial\", {\n      attach: \"material\",\n      args: [{\n        uniforms: shaderMaterialData.uniforms,\n        uniformsNeedUpdate: true,\n        vertexShader: glsl(shaderMaterialData.vertexShader),\n        fragmentShader: glsl(shaderMaterialData.fragmentShader)\n      }]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(ArtistImage, \"H1kZkrTDKUYib8dZOrl6hxN8NZk=\", false, function () {\n  return [useFrame];\n});\n\n_c = ArtistImage;\n\nvar _c;\n\n$RefreshReg$(_c, \"ArtistImage\");","map":{"version":3,"sources":["/Users/karen/repos/karen/kshack/src/components/ArtistImage.js"],"names":["THREE","Canvas","useFrame","useLoader","useMemo","useState","useRef","glsl","TextureLoader","a","gsap","fragmentShader","vertexShader","ArtistImage","src","index","imageRef","hover","setHover","plane","texture","minFilter","LinearFilter","generateMipmaps","shaderMaterialData","uniforms","uTexture","value","uTime","uProg","uIndex","imageRefUniforms","state","delta","current","material","uniformsNeedUpdate","handlePointerOver","console","log","to","ease","handlePointerOut"],"mappings":"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","sourcesContent":["import * as THREE from 'three'\nimport { Canvas, useFrame, useLoader } from '@react-three/fiber'\nimport { useMemo, useState, useRef } from 'react'\nimport glsl from 'glslify';\nimport { TextureLoader } from 'three/src/loaders/TextureLoader'\nimport { a } from '@react-spring/three'\nimport gsap from 'gsap';\n\nimport { fragmentShader, vertexShader}  from '../assets/shader.js'\n\n/*\n Load texture into shader\n https://codesandbox.io/s/divine-shape-wqf6f?from-embed=&file=/src/App.js:90-155\n https://codesandbox.io/s/02-make-some-noise-forked-inj5q?file=/src/gl/index.js\n https://codesandbox.io/s/03-adding-the-texture-forked-h6sup?file=/src/gl/index.js\n*/\nexport function ArtistImage({src, index}) {\n  const imageRef = useRef()\n  const [hover, setHover] = useState(false);\n  const plane = useMemo(() => <planeGeometry attach=\"geometry\" args={[5, 5, 32, 32]} />)\n\n  const texture = useMemo(() => useLoader(TextureLoader, src))\n  texture.minFilter = THREE.LinearFilter;\n  texture.generateMipmaps = false;\n  \n  const shaderMaterialData = useMemo(\n      () => ({\n          uniforms: {\n              uTexture: { value: texture},\n              uTime: { value: 0 },\n              uProg: { value: 0 },\n              uIndex: { value: index },\n          },\n          fragmentShader,\n          vertexShader\n      }),\n      []\n  )\n\n  const imageRefUniforms = \n\n  /* https://onion2k.hashnode.dev/using-a-useframe-render-hook-in-react-three-fiber */\n  useFrame((state, delta) => {\n    if (imageRef && imageRef.current && hover) {\n      imageRef.current.material.uniformsNeedUpdate = true;\n      imageRef.current.material.uniforms.uTime.value += delta/2;\n    }\n  })\n\n  function handlePointerOver() {\n    setHover(true)\n    console.log(imageRef.current.material.uniforms)\n    gsap.to(imageRef.current.material.uniforms.uProg, {\n      // duration: 1,\n      value: 1,\n      ease: 'power.inOut',\n    });\n  }\n\n  function handlePointerOut() {\n    setHover(false);\n    gsap.to(imageRef.current.material.uniforms.uProg, {\n      // duration: 1,\n      value: 0,\n      ease: 'power.inOut',\n    });\n  }\n\n  return (\n    <a.mesh ref={imageRef}\n      onPointerOver={() => handlePointerOver()}\n      onPointerOut={() => handlePointerOut()}\n    >\n      {plane}\n      <shaderMaterial attach=\"material\" args={[{\n            uniforms: shaderMaterialData.uniforms,\n            uniformsNeedUpdate: true,\n            vertexShader: glsl(shaderMaterialData.vertexShader),\n            fragmentShader: glsl(shaderMaterialData.fragmentShader),\n        }]} />\n      </a.mesh>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}